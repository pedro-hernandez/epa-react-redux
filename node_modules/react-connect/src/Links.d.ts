import { Link } from './Link';
import { Container } from './container';
export interface FunctionalLink<P, O> {
    (ownProps: O): P;
}
export interface ObjectLink<P, O> {
    init?(ownProps: O): P;
    onOwnPropsChange(ownProps: P): P | undefined;
    updates(update: (props: P) => void, getOwnProps: () => O): void;
}
export declare type LinkConstructor<P, S> = {
    (ownProps: P): Link<P, S>;
} | {
    new (ownProps: P): Link<P, S>;
};
export declare type LinkLike<P, O> = P | FunctionalLink<P, O> | ObjectLink<P, O> | LinkConstructor<O, P>;
export declare class Links {
    private links;
    static isFunctionalLink<P, O>(link: LinkLike<P, O>): link is FunctionalLink<P, O>;
    static isObjectLink<P, O>(link: LinkLike<P, O>): link is ObjectLink<P, O>;
    addLink<P, O, L extends LinkLike<P, O>>(Container: Container<P, O>, link: L): Links;
    getLinkFor<P, O>(componentName: string): LinkLike<P, O>;
}
