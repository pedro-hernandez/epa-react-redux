"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var prop_types_1 = require("prop-types");
var Link_1 = require("./Link");
function container(ComponentOrName, MaybeComponent) {
    var name;
    var Component;
    if (typeof ComponentOrName === 'string' && typeof MaybeComponent === 'function') {
        name = ComponentOrName;
        Component = MaybeComponent;
    }
    else {
        Component = ComponentOrName;
        name = Component.displayName || Component.name;
    }
    if (!name) {
        throw new Error('Component has no name. Please ensure it is named or pass string identifier as a first argument to "container".');
    }
    var Container = (function (_super) {
        __extends(Container, _super);
        function Container(props, context) {
            var _this = _super.call(this, props, context) || this;
            if (!context.reactConnectContext && !props.links)
                throw new Error('Did not detect links in context. Did you use Provider?');
            _this.reactConnectContext = context.reactConnectContext || { links: props.links };
            var link = _this.reactConnectContext.links.getLinkFor(name);
            if (!link)
                throw new Error("Did not find link for " + name);
            var computedProps;
            if (typeof link === 'function') {
                var linkInstance_1 = new link(props, _this.reactConnectContext);
                if (linkInstance_1 instanceof Link_1.Link) {
                    _this.linkInstance = linkInstance_1;
                    var that_1 = _this;
                    _this.linkInstance.setState = function (state) {
                        this.state = state;
                        that_1.forceUpdate();
                    };
                    _this.linkInstance.forceUpdate = _this.forceUpdate.bind(_this);
                    _this.state = {};
                    [
                        "componentWillMount",
                        "componentDidMount",
                        "componentWillUnmount",
                        "componentWillUpdate",
                        "shouldComponentUpdate"
                    ].forEach(function (methodName) { return _this.assignLifeCycleMethod(linkInstance_1, methodName); });
                    return _this;
                }
                else {
                    computedProps = linkInstance_1;
                    _this.link = link;
                }
            }
            else {
                computedProps = link;
            }
            _this.state = { computedProps: computedProps };
            return _this;
        }
        Container.prototype.assignLifeCycleMethod = function (link, methodName) {
            if (link[methodName]) {
                this[methodName] = link[methodName].bind(link);
            }
        };
        Container.prototype.getChildContext = function () {
            if (this.linkInstance && this.linkInstance.getChildContext) {
                var childContext = this.linkInstance.getChildContext();
                return { reactConnectContext: __assign({}, this.reactConnectContext, childContext) };
            }
            return { reactConnectContext: this.reactConnectContext };
        };
        Container.prototype.componentWillReceiveProps = function (nextProps, nextContext) {
            if (this.link) {
                this.setState({ computedProps: this.link(nextProps) });
            }
            else if (this.linkInstance) {
                if (this.linkInstance.componentWillReceiveProps) {
                    this.linkInstance.componentWillReceiveProps(nextProps, nextContext);
                }
                this.linkInstance.props = nextProps;
            }
        };
        Container.prototype.render = function () {
            if (this.state.computedProps) {
                var props = __assign({}, this.props, this.state.computedProps);
                return React.createElement(Component, __assign({}, props));
            }
            else if (this.linkInstance) {
                var props = __assign({}, this.props, this.linkInstance.preRender());
                return React.createElement(Component, __assign({}, props));
            }
            else {
                throw new Error('Data inconsistency!!!');
            }
        };
        return Container;
    }(React.Component));
    Container.contextTypes = {
        reactConnectContext: prop_types_1.any
    };
    Container.childContextTypes = {
        reactConnectContext: prop_types_1.any
    };
    Container.WrappedComponent = Component;
    Container.wrappedComponentName = name;
    Container.displayName = "Container(" + name + ")";
    return Container;
}
exports.container = container;
//# sourceMappingURL=container.js.map